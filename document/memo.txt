The cross product of vectors follows the right hand rule.

test code:
    Vector3 v_x(1,0,0);
    Vector3 v_y(0,1,0);
    Vector3 v = v_x.cross(v_y);
    std::cout << v << std::endl;

三角形法线满足右手螺旋定则
The normal of a triangle follows the right-hand screw rule.  


SimpleTracer::trace
// assert(inputColor.isValid());

Ball::sampleFromPoint
if(pdf < 0.08)
{
    int sss= 3;
}

SimpleTracer::HandleLastBounce
// retColor.clamp();

有时候tracer返回的颜色不在范围内，是精度误差？
还是说brdf不应该界定在0到1之间

Color::getConvertedValue，
可以在这里加一些assert来看看color是不是过多或者溢出了。。。。

 //一维空间中如果两个线段重叠，那么取它们的重叠部分
    //第一条线段为t0相关,第二条线段端点为t1相关
    const static bool getOverlap(float t0_min, float t0_max, float t1_min, float t1_max, float &tMin, float &tMax);



cmake ..   # 或者其他生成器
cmake --build .

cmake ..   # 或者其他生成器
cmake --build .

cmake -DCMAKE_INSTALL_PREFIX=/path/to/install .
cmake --build .
cmake --install .


运行 cmake --install： 在执行 cmake 之后，运行 cmake --install . 可以将所有内容安装到 ${CMAKE_BINARY_DIR}/install 目录中。

Vector3 v(0,123,456);
Vector3 dir(0,34,54);
v/dir = (nan , a ,b);
//nan needed to be handled




Vector3 Ball::sampleFromPoint(const Vector3 &thatPoint, float &pdf) const
{
    Vector3 localPoint = m_transform.invTransformPoint(thatPoint);
    Vector3 localNormal = getLocalNormal(localPoint);

    Frame frame(localNormal, dpdu(thatPoint));
    Vector3 framePoint = frame.pointToLocal(localPoint);

    float d = framePoint.z;
    float alpha = std::asin(r / d);

    float thetaMax = MathConstant::PI - alpha;
    Vector3 dir = Vector3::sampleUniformFromCone(thetaMax);
    Vector3 sampledFramePoint = r * dir;
    sampledFramePoint *= Common::SAMPLE_LIGHTR_CORRECT_FACTOR;

    Vector3 localSampledPoint = frame.pointToWorld(sampledFramePoint);

    Vector3 worldSampledPoint = m_transform.transformPoint(localSampledPoint);

    pdf = (1 / (1 - std::cos(thetaMax))) * MathConstant::INV_TWO_PI;
 
    return worldSampledPoint;
}

bug?see this later...
Vector3 Vector3::sampleUniformFromCone(float thetaMax)

PBRT第四版公式14.8好像错了

//使用了一种简单粗暴的方法防止自交(in neeTracer.cpp)
hitRay.origin = record.point + sign * record.normal * 0.001f;


//bug
Color Hitter::getColorFromLight(const Ray &ray) const
{
    // if(m_pLight->isIn(ray.origin))
    // {
    //     return Color::COLOR_WHITE;
    // }

    float t;
    Vector3 normal;
    float dot;

    if (!hitLightOnly(ray, t, normal, dot))
    {
        return Color::COLOR_BLACK;
    }

    Color color = m_pLight->getColor();

    HitRecord record;
    if (!hitGeometryObjectOnly(ray, record))
    {
        // return color * dot;
        return color;
    }

    if (t < record.t)
    {
        // return color * dot;
        return color;
    }

    return Color::COLOR_BLACK;
}

-----
inputVector.refract(normal, etaInputSide, etaOutputSide, totalReflect, fresnel);
totalReflect好像算错了
